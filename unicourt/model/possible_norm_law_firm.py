# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from unicourt.model.possible_norm_law_firm_score_constituents import PossibleNormLawFirmScoreConstituents
from unicourt.model.possible_norm_law_firm_source_details import PossibleNormLawFirmSourceDetails
from typing import Optional, Set
from typing_extensions import Self

class PossibleNormLawFirm(BaseModel):
    """
    PossibleNormLawFirm
    """ # noqa: E501
    object: Optional[Annotated[str, Field(min_length=19, strict=True, max_length=19)]] = Field(default='PossibleNormLawFirm', description="Name of the object")
    norm_law_firm_id: Optional[Annotated[str, Field(min_length=18, strict=True, max_length=18)]] = Field(default=None, alias="normLawFirmId")
    norm_law_firm_name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, alias="normLawFirmName")
    best_match: Optional[StrictBool] = Field(default=False, alias="bestMatch")
    source_details: Optional[PossibleNormLawFirmSourceDetails] = Field(default=None, alias="sourceDetails")
    confidence_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="confidenceScore")
    score_constituents: Optional[PossibleNormLawFirmScoreConstituents] = Field(default=None, alias="scoreConstituents")
    norm_law_firm_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="normLawFirmAPI")
    associated_norm_attorney_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="associatedNormAttorneyAPI")
    associated_norm_judge_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="associatedNormJudgeAPI")
    associated_norm_parties_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="associatedNormPartiesAPI")
    case_count_analytics_by_norm_law_firm_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="caseCountAnalyticsByNormLawFirmAPI")
    case_count_analytics_by_opposing_norm_law_firm_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="caseCountAnalyticsByOpposingNormLawFirmAPI")
    __properties: ClassVar[List[str]] = ["object", "normLawFirmId", "normLawFirmName", "bestMatch", "sourceDetails", "confidenceScore", "scoreConstituents", "normLawFirmAPI", "associatedNormAttorneyAPI", "associatedNormJudgeAPI", "associatedNormPartiesAPI", "caseCountAnalyticsByNormLawFirmAPI", "caseCountAnalyticsByOpposingNormLawFirmAPI"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PossibleNormLawFirm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_details
        if self.source_details:
            _dict['sourceDetails'] = self.source_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of score_constituents
        if self.score_constituents:
            _dict['scoreConstituents'] = self.score_constituents.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PossibleNormLawFirm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object") if obj.get("object") is not None else 'PossibleNormLawFirm',
            "normLawFirmId": obj.get("normLawFirmId"),
            "normLawFirmName": obj.get("normLawFirmName"),
            "bestMatch": obj.get("bestMatch") if obj.get("bestMatch") is not None else False,
            "sourceDetails": PossibleNormLawFirmSourceDetails.from_dict(obj["sourceDetails"]) if obj.get("sourceDetails") is not None else None,
            "confidenceScore": obj.get("confidenceScore"),
            "scoreConstituents": PossibleNormLawFirmScoreConstituents.from_dict(obj["scoreConstituents"]) if obj.get("scoreConstituents") is not None else None,
            "normLawFirmAPI": obj.get("normLawFirmAPI"),
            "associatedNormAttorneyAPI": obj.get("associatedNormAttorneyAPI"),
            "associatedNormJudgeAPI": obj.get("associatedNormJudgeAPI"),
            "associatedNormPartiesAPI": obj.get("associatedNormPartiesAPI"),
            "caseCountAnalyticsByNormLawFirmAPI": obj.get("caseCountAnalyticsByNormLawFirmAPI"),
            "caseCountAnalyticsByOpposingNormLawFirmAPI": obj.get("caseCountAnalyticsByOpposingNormLawFirmAPI")
        })
        return _obj


