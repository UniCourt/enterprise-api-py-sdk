"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from unicourt.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from unicourt.exceptions import ApiAttributeError


def lazy_import():
    from unicourt.model.bar_source_data_administrative_actions_array_inner import BarSourceDataAdministrativeActionsArrayInner
    from unicourt.model.bar_source_data_advanced_degree_array_inner import BarSourceDataAdvancedDegreeArrayInner
    from unicourt.model.bar_source_data_bar_status_array_inner import BarSourceDataBarStatusArrayInner
    from unicourt.model.bar_source_data_board_certifications_array_inner import BarSourceDataBoardCertificationsArrayInner
    from unicourt.model.bar_source_data_committees_array_inner import BarSourceDataCommitteesArrayInner
    from unicourt.model.bar_source_data_court_history_array_inner import BarSourceDataCourtHistoryArrayInner
    from unicourt.model.bar_source_data_court_of_admissions import BarSourceDataCourtOfAdmissions
    from unicourt.model.bar_source_data_disciplinary_history_array_inner import BarSourceDataDisciplinaryHistoryArrayInner
    from unicourt.model.bar_source_data_discipline_summaries_array_inner import BarSourceDataDisciplineSummariesArrayInner
    from unicourt.model.bar_source_data_employment_history_array_inner import BarSourceDataEmploymentHistoryArrayInner
    from unicourt.model.bar_source_data_fees_options_array_inner import BarSourceDataFeesOptionsArrayInner
    from unicourt.model.bar_source_data_involvements_array_inner import BarSourceDataInvolvementsArrayInner
    from unicourt.model.bar_source_data_law_school_array_inner import BarSourceDataLawSchoolArrayInner
    from unicourt.model.bar_source_data_name import BarSourceDataName
    from unicourt.model.bar_source_data_open_action_status_array_inner import BarSourceDataOpenActionStatusArrayInner
    from unicourt.model.bar_source_data_other_jurisdiction_array_inner import BarSourceDataOtherJurisdictionArrayInner
    from unicourt.model.bar_source_data_public_hearing_array_inner import BarSourceDataPublicHearingArrayInner
    from unicourt.model.bar_source_data_reason_for_inactivation import BarSourceDataReasonForInactivation
    from unicourt.model.bar_source_data_related_cases_array_inner import BarSourceDataRelatedCasesArrayInner
    from unicourt.model.bar_source_data_source_info import BarSourceDataSourceInfo
    from unicourt.model.bar_source_data_statewide_grievance_committee_history_array_inner import BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner
    from unicourt.model.bar_source_data_status_history_array_inner import BarSourceDataStatusHistoryArrayInner
    from unicourt.model.bar_source_data_ten_year_discipline_array_inner import BarSourceDataTenYearDisciplineArrayInner
    globals()['BarSourceDataAdministrativeActionsArrayInner'] = BarSourceDataAdministrativeActionsArrayInner
    globals()['BarSourceDataAdvancedDegreeArrayInner'] = BarSourceDataAdvancedDegreeArrayInner
    globals()['BarSourceDataBarStatusArrayInner'] = BarSourceDataBarStatusArrayInner
    globals()['BarSourceDataBoardCertificationsArrayInner'] = BarSourceDataBoardCertificationsArrayInner
    globals()['BarSourceDataCommitteesArrayInner'] = BarSourceDataCommitteesArrayInner
    globals()['BarSourceDataCourtHistoryArrayInner'] = BarSourceDataCourtHistoryArrayInner
    globals()['BarSourceDataCourtOfAdmissions'] = BarSourceDataCourtOfAdmissions
    globals()['BarSourceDataDisciplinaryHistoryArrayInner'] = BarSourceDataDisciplinaryHistoryArrayInner
    globals()['BarSourceDataDisciplineSummariesArrayInner'] = BarSourceDataDisciplineSummariesArrayInner
    globals()['BarSourceDataEmploymentHistoryArrayInner'] = BarSourceDataEmploymentHistoryArrayInner
    globals()['BarSourceDataFeesOptionsArrayInner'] = BarSourceDataFeesOptionsArrayInner
    globals()['BarSourceDataInvolvementsArrayInner'] = BarSourceDataInvolvementsArrayInner
    globals()['BarSourceDataLawSchoolArrayInner'] = BarSourceDataLawSchoolArrayInner
    globals()['BarSourceDataName'] = BarSourceDataName
    globals()['BarSourceDataOpenActionStatusArrayInner'] = BarSourceDataOpenActionStatusArrayInner
    globals()['BarSourceDataOtherJurisdictionArrayInner'] = BarSourceDataOtherJurisdictionArrayInner
    globals()['BarSourceDataPublicHearingArrayInner'] = BarSourceDataPublicHearingArrayInner
    globals()['BarSourceDataReasonForInactivation'] = BarSourceDataReasonForInactivation
    globals()['BarSourceDataRelatedCasesArrayInner'] = BarSourceDataRelatedCasesArrayInner
    globals()['BarSourceDataSourceInfo'] = BarSourceDataSourceInfo
    globals()['BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner'] = BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner
    globals()['BarSourceDataStatusHistoryArrayInner'] = BarSourceDataStatusHistoryArrayInner
    globals()['BarSourceDataTenYearDisciplineArrayInner'] = BarSourceDataTenYearDisciplineArrayInner


class BarSourceData(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('object',): {
            'max_length': 13,
        },
        ('admission_type',): {
            'max_length': 250,
        },
        ('appellate_court_district',): {
            'max_length': 250,
        },
        ('appellate_division_department',): {
            'max_length': 250,
        },
        ('attorney_group',): {
            'max_length': 250,
        },
        ('authorized',): {
            'max_length': 250,
        },
        ('bar_service_class',): {
            'max_length': 250,
        },
        ('bio',): {
            'max_length': 5000,
        },
        ('board_district',): {
            'max_length': 250,
        },
        ('circuit',): {
            'max_length': 250,
        },
        ('comments',): {
            'max_length': 250,
        },
        ('court_service_email',): {
            'max_length': 250,
        },
        ('district',): {
            'max_length': 250,
        },
        ('expiration_date',): {
            'max_length': 25,
        },
        ('firm_size',): {
            'max_length': 250,
        },
        ('firm_website',): {
            'max_length': 1000,
        },
        ('first_admitted_date',): {
            'max_length': 25,
        },
        ('home_county',): {
            'max_length': 250,
        },
        ('in_good_standing',): {
            'max_length': 250,
        },
        ('insurance',): {
            'max_length': 500,
        },
        ('judicial_district',): {
            'max_length': 250,
        },
        ('juris_type',): {
            'max_length': 250,
        },
        ('last_renewal_date',): {
            'max_length': 25,
        },
        ('license_type',): {
            'max_length': 250,
        },
        ('next_registration',): {
            'max_length': 25,
        },
        ('next_renewal_date',): {
            'max_length': 25,
        },
        ('parish',): {
            'max_length': 250,
        },
        ('position',): {
            'max_length': 250,
        },
        ('private_law_practice',): {
            'max_length': 250,
        },
        ('profile_last_certified',): {
            'max_length': 25,
        },
        ('status',): {
            'max_length': 500,
        },
        ('status_date',): {
            'max_length': 25,
        },
        ('undergraduate_school',): {
            'max_length': 250,
        },
        ('bar_law_firm',): {
            'max_length': 250,
        },
        ('years_of_practice',): {
            'max_length': 250,
        },
        ('status_hint',): {
            'max_length': 500,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'object': (str,),  # noqa: E501
            'administrative_actions_array': ([BarSourceDataAdministrativeActionsArrayInner],),  # noqa: E501
            'admission_type': (str, none_type,),  # noqa: E501
            'appellate_court_district': (str, none_type,),  # noqa: E501
            'appellate_division_department': (str, none_type,),  # noqa: E501
            'attorney_group': (str, none_type,),  # noqa: E501
            'authorized': (str, none_type,),  # noqa: E501
            'bar_service_class': (str, none_type,),  # noqa: E501
            'bio': (str, none_type,),  # noqa: E501
            'board_certifications_array': ([BarSourceDataBoardCertificationsArrayInner],),  # noqa: E501
            'board_district': (str, none_type,),  # noqa: E501
            'circuit': (str, none_type,),  # noqa: E501
            'comments': (str, none_type,),  # noqa: E501
            'committees_array': ([BarSourceDataCommitteesArrayInner],),  # noqa: E501
            'court_history_array': ([BarSourceDataCourtHistoryArrayInner],),  # noqa: E501
            'court_of_admissions': (BarSourceDataCourtOfAdmissions,),  # noqa: E501
            'court_service_email': (str, none_type,),  # noqa: E501
            'disciplinary_history_array': ([BarSourceDataDisciplinaryHistoryArrayInner],),  # noqa: E501
            'discipline_summaries_array': ([BarSourceDataDisciplineSummariesArrayInner],),  # noqa: E501
            'dismissals_array': ([str],),  # noqa: E501
            'district': (str, none_type,),  # noqa: E501
            'employment_history_array': ([BarSourceDataEmploymentHistoryArrayInner],),  # noqa: E501
            'expiration_date': (datetime, none_type,),  # noqa: E501
            'fees_options_array': ([BarSourceDataFeesOptionsArrayInner],),  # noqa: E501
            'firm_size': (str, none_type,),  # noqa: E501
            'firm_website': (str, none_type,),  # noqa: E501
            'first_admitted_date': (datetime, none_type,),  # noqa: E501
            'first_admitted_year': (int, none_type,),  # noqa: E501
            'home_county': (str, none_type,),  # noqa: E501
            'in_good_standing': (str, none_type,),  # noqa: E501
            'insurance': (str, none_type,),  # noqa: E501
            'involvements_array': ([BarSourceDataInvolvementsArrayInner],),  # noqa: E501
            'judicial_district': (str, none_type,),  # noqa: E501
            'juris_type': (str, none_type,),  # noqa: E501
            'languages_array': ([str],),  # noqa: E501
            'last_renewal_date': (datetime, none_type,),  # noqa: E501
            'law_school_array': ([BarSourceDataLawSchoolArrayInner],),  # noqa: E501
            'legal_speciality_array': ([str],),  # noqa: E501
            'license_type': (str, none_type,),  # noqa: E501
            'name': (BarSourceDataName,),  # noqa: E501
            'next_registration': (datetime, none_type,),  # noqa: E501
            'next_renewal_date': (datetime, none_type,),  # noqa: E501
            'open_action_status_array': ([BarSourceDataOpenActionStatusArrayInner],),  # noqa: E501
            'other_jurisdiction_array': ([BarSourceDataOtherJurisdictionArrayInner],),  # noqa: E501
            'other_name_array': ([str],),  # noqa: E501
            'parish': (str, none_type,),  # noqa: E501
            'pending_proceeding_array': ([str],),  # noqa: E501
            'position': (str, none_type,),  # noqa: E501
            'practice_area_array': ([str],),  # noqa: E501
            'practice_location_array': ([str],),  # noqa: E501
            'private_law_practice': (str, none_type,),  # noqa: E501
            'profile_last_certified': (datetime, none_type,),  # noqa: E501
            'public_hearing_array': ([BarSourceDataPublicHearingArrayInner],),  # noqa: E501
            'reason_for_inactivation': (BarSourceDataReasonForInactivation,),  # noqa: E501
            'sections_array': ([str],),  # noqa: E501
            'services_array': ([str],),  # noqa: E501
            'source_info': (BarSourceDataSourceInfo,),  # noqa: E501
            'statewide_grievance_committee_history_array': ([BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner],),  # noqa: E501
            'status': (str, none_type,),  # noqa: E501
            'status_date': (datetime, none_type,),  # noqa: E501
            'status_history_array': ([BarSourceDataStatusHistoryArrayInner],),  # noqa: E501
            'ten_year_discipline_array': ([BarSourceDataTenYearDisciplineArrayInner],),  # noqa: E501
            'undergraduate_school': (str, none_type,),  # noqa: E501
            'bar_law_firm': (str, none_type,),  # noqa: E501
            'years_of_practice': (str, none_type,),  # noqa: E501
            'clients_represented_array': ([str],),  # noqa: E501
            'status_hint': (str, none_type,),  # noqa: E501
            'advanced_degree_array': ([BarSourceDataAdvancedDegreeArrayInner],),  # noqa: E501
            'bar_status_array': ([BarSourceDataBarStatusArrayInner],),  # noqa: E501
            'related_cases_array': ([BarSourceDataRelatedCasesArrayInner],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'object': 'object',  # noqa: E501
        'administrative_actions_array': 'administrativeActionsArray',  # noqa: E501
        'admission_type': 'admissionType',  # noqa: E501
        'appellate_court_district': 'appellateCourtDistrict',  # noqa: E501
        'appellate_division_department': 'appellateDivisionDepartment',  # noqa: E501
        'attorney_group': 'attorneyGroup',  # noqa: E501
        'authorized': 'authorized',  # noqa: E501
        'bar_service_class': 'barServiceClass',  # noqa: E501
        'bio': 'bio',  # noqa: E501
        'board_certifications_array': 'boardCertificationsArray',  # noqa: E501
        'board_district': 'boardDistrict',  # noqa: E501
        'circuit': 'circuit',  # noqa: E501
        'comments': 'comments',  # noqa: E501
        'committees_array': 'committeesArray',  # noqa: E501
        'court_history_array': 'courtHistoryArray',  # noqa: E501
        'court_of_admissions': 'courtOfAdmissions',  # noqa: E501
        'court_service_email': 'courtServiceEmail',  # noqa: E501
        'disciplinary_history_array': 'disciplinaryHistoryArray',  # noqa: E501
        'discipline_summaries_array': 'disciplineSummariesArray',  # noqa: E501
        'dismissals_array': 'dismissalsArray',  # noqa: E501
        'district': 'district',  # noqa: E501
        'employment_history_array': 'employmentHistoryArray',  # noqa: E501
        'expiration_date': 'expirationDate',  # noqa: E501
        'fees_options_array': 'feesOptionsArray',  # noqa: E501
        'firm_size': 'firmSize',  # noqa: E501
        'firm_website': 'firmWebsite',  # noqa: E501
        'first_admitted_date': 'firstAdmittedDate',  # noqa: E501
        'first_admitted_year': 'firstAdmittedYear',  # noqa: E501
        'home_county': 'homeCounty',  # noqa: E501
        'in_good_standing': 'inGoodStanding',  # noqa: E501
        'insurance': 'insurance',  # noqa: E501
        'involvements_array': 'involvementsArray',  # noqa: E501
        'judicial_district': 'judicialDistrict',  # noqa: E501
        'juris_type': 'jurisType',  # noqa: E501
        'languages_array': 'languagesArray',  # noqa: E501
        'last_renewal_date': 'lastRenewalDate',  # noqa: E501
        'law_school_array': 'lawSchoolArray',  # noqa: E501
        'legal_speciality_array': 'legalSpecialityArray',  # noqa: E501
        'license_type': 'licenseType',  # noqa: E501
        'name': 'name',  # noqa: E501
        'next_registration': 'nextRegistration',  # noqa: E501
        'next_renewal_date': 'nextRenewalDate',  # noqa: E501
        'open_action_status_array': 'openActionStatusArray',  # noqa: E501
        'other_jurisdiction_array': 'otherJurisdictionArray',  # noqa: E501
        'other_name_array': 'otherNameArray',  # noqa: E501
        'parish': 'parish',  # noqa: E501
        'pending_proceeding_array': 'pendingProceedingArray',  # noqa: E501
        'position': 'position',  # noqa: E501
        'practice_area_array': 'practiceAreaArray',  # noqa: E501
        'practice_location_array': 'practiceLocationArray',  # noqa: E501
        'private_law_practice': 'privateLawPractice',  # noqa: E501
        'profile_last_certified': 'profileLastCertified',  # noqa: E501
        'public_hearing_array': 'publicHearingArray',  # noqa: E501
        'reason_for_inactivation': 'reasonForInactivation',  # noqa: E501
        'sections_array': 'sectionsArray',  # noqa: E501
        'services_array': 'servicesArray',  # noqa: E501
        'source_info': 'sourceInfo',  # noqa: E501
        'statewide_grievance_committee_history_array': 'statewideGrievanceCommitteeHistoryArray',  # noqa: E501
        'status': 'status',  # noqa: E501
        'status_date': 'statusDate',  # noqa: E501
        'status_history_array': 'statusHistoryArray',  # noqa: E501
        'ten_year_discipline_array': 'tenYearDisciplineArray',  # noqa: E501
        'undergraduate_school': 'undergraduateSchool',  # noqa: E501
        'bar_law_firm': 'barLawFirm',  # noqa: E501
        'years_of_practice': 'yearsOfPractice',  # noqa: E501
        'clients_represented_array': 'clientsRepresentedArray',  # noqa: E501
        'status_hint': 'statusHint',  # noqa: E501
        'advanced_degree_array': 'advancedDegreeArray',  # noqa: E501
        'bar_status_array': 'barStatusArray',  # noqa: E501
        'related_cases_array': 'relatedCasesArray',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, administrative_actions_array, admission_type, appellate_court_district, appellate_division_department, attorney_group, authorized, bar_service_class, bio, board_certifications_array, board_district, circuit, comments, committees_array, court_history_array, court_of_admissions, court_service_email, disciplinary_history_array, discipline_summaries_array, dismissals_array, district, employment_history_array, expiration_date, fees_options_array, firm_size, firm_website, first_admitted_date, first_admitted_year, home_county, in_good_standing, insurance, involvements_array, judicial_district, juris_type, languages_array, last_renewal_date, law_school_array, legal_speciality_array, license_type, name, next_registration, next_renewal_date, open_action_status_array, other_jurisdiction_array, other_name_array, parish, pending_proceeding_array, position, practice_area_array, practice_location_array, private_law_practice, profile_last_certified, public_hearing_array, reason_for_inactivation, sections_array, services_array, source_info, statewide_grievance_committee_history_array, status, status_date, status_history_array, ten_year_discipline_array, undergraduate_school, bar_law_firm, years_of_practice, clients_represented_array, status_hint, advanced_degree_array, bar_status_array, related_cases_array, *args, **kwargs):  # noqa: E501
        """BarSourceData - a model defined in OpenAPI

        Args:
            administrative_actions_array ([BarSourceDataAdministrativeActionsArrayInner]):
            admission_type (str, none_type):
            appellate_court_district (str, none_type):
            appellate_division_department (str, none_type):
            attorney_group (str, none_type):
            authorized (str, none_type):
            bar_service_class (str, none_type):
            bio (str, none_type):
            board_certifications_array ([BarSourceDataBoardCertificationsArrayInner]):
            board_district (str, none_type):
            circuit (str, none_type):
            comments (str, none_type):
            committees_array ([BarSourceDataCommitteesArrayInner]):
            court_history_array ([BarSourceDataCourtHistoryArrayInner]):
            court_of_admissions (BarSourceDataCourtOfAdmissions):
            court_service_email (str, none_type):
            disciplinary_history_array ([BarSourceDataDisciplinaryHistoryArrayInner]):
            discipline_summaries_array ([BarSourceDataDisciplineSummariesArrayInner]):
            dismissals_array ([str]):
            district (str, none_type):
            employment_history_array ([BarSourceDataEmploymentHistoryArrayInner]):
            expiration_date (datetime, none_type):
            fees_options_array ([BarSourceDataFeesOptionsArrayInner]):
            firm_size (str, none_type):
            firm_website (str, none_type):
            first_admitted_date (datetime, none_type): The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.
            first_admitted_year (int, none_type):
            home_county (str, none_type):
            in_good_standing (str, none_type):
            insurance (str, none_type):
            involvements_array ([BarSourceDataInvolvementsArrayInner]):
            judicial_district (str, none_type):
            juris_type (str, none_type):
            languages_array ([str]):
            last_renewal_date (datetime, none_type):
            law_school_array ([BarSourceDataLawSchoolArrayInner]):
            legal_speciality_array ([str]):
            license_type (str, none_type):
            name (BarSourceDataName):
            next_registration (datetime, none_type):
            next_renewal_date (datetime, none_type):
            open_action_status_array ([BarSourceDataOpenActionStatusArrayInner]):
            other_jurisdiction_array ([BarSourceDataOtherJurisdictionArrayInner]):
            other_name_array ([str]):
            parish (str, none_type):
            pending_proceeding_array ([str]):
            position (str, none_type):
            practice_area_array ([str]):
            practice_location_array ([str]):
            private_law_practice (str, none_type):
            profile_last_certified (datetime, none_type):
            public_hearing_array ([BarSourceDataPublicHearingArrayInner]):
            reason_for_inactivation (BarSourceDataReasonForInactivation):
            sections_array ([str]):
            services_array ([str]):
            source_info (BarSourceDataSourceInfo):
            statewide_grievance_committee_history_array ([BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner]):
            status (str, none_type):
            status_date (datetime, none_type):
            status_history_array ([BarSourceDataStatusHistoryArrayInner]):
            ten_year_discipline_array ([BarSourceDataTenYearDisciplineArrayInner]):
            undergraduate_school (str, none_type):
            bar_law_firm (str, none_type):
            years_of_practice (str, none_type):
            clients_represented_array ([str]):
            status_hint (str, none_type):
            advanced_degree_array ([BarSourceDataAdvancedDegreeArrayInner]):
            bar_status_array ([BarSourceDataBarStatusArrayInner]):
            related_cases_array ([BarSourceDataRelatedCasesArrayInner]):

        Keyword Args:
            object (str): defaults to "BarSourceData"  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        object = kwargs.get('object', "BarSourceData")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.object = object
        self.administrative_actions_array = administrative_actions_array
        self.admission_type = admission_type
        self.appellate_court_district = appellate_court_district
        self.appellate_division_department = appellate_division_department
        self.attorney_group = attorney_group
        self.authorized = authorized
        self.bar_service_class = bar_service_class
        self.bio = bio
        self.board_certifications_array = board_certifications_array
        self.board_district = board_district
        self.circuit = circuit
        self.comments = comments
        self.committees_array = committees_array
        self.court_history_array = court_history_array
        self.court_of_admissions = court_of_admissions
        self.court_service_email = court_service_email
        self.disciplinary_history_array = disciplinary_history_array
        self.discipline_summaries_array = discipline_summaries_array
        self.dismissals_array = dismissals_array
        self.district = district
        self.employment_history_array = employment_history_array
        self.expiration_date = expiration_date
        self.fees_options_array = fees_options_array
        self.firm_size = firm_size
        self.firm_website = firm_website
        self.first_admitted_date = first_admitted_date
        self.first_admitted_year = first_admitted_year
        self.home_county = home_county
        self.in_good_standing = in_good_standing
        self.insurance = insurance
        self.involvements_array = involvements_array
        self.judicial_district = judicial_district
        self.juris_type = juris_type
        self.languages_array = languages_array
        self.last_renewal_date = last_renewal_date
        self.law_school_array = law_school_array
        self.legal_speciality_array = legal_speciality_array
        self.license_type = license_type
        self.name = name
        self.next_registration = next_registration
        self.next_renewal_date = next_renewal_date
        self.open_action_status_array = open_action_status_array
        self.other_jurisdiction_array = other_jurisdiction_array
        self.other_name_array = other_name_array
        self.parish = parish
        self.pending_proceeding_array = pending_proceeding_array
        self.position = position
        self.practice_area_array = practice_area_array
        self.practice_location_array = practice_location_array
        self.private_law_practice = private_law_practice
        self.profile_last_certified = profile_last_certified
        self.public_hearing_array = public_hearing_array
        self.reason_for_inactivation = reason_for_inactivation
        self.sections_array = sections_array
        self.services_array = services_array
        self.source_info = source_info
        self.statewide_grievance_committee_history_array = statewide_grievance_committee_history_array
        self.status = status
        self.status_date = status_date
        self.status_history_array = status_history_array
        self.ten_year_discipline_array = ten_year_discipline_array
        self.undergraduate_school = undergraduate_school
        self.bar_law_firm = bar_law_firm
        self.years_of_practice = years_of_practice
        self.clients_represented_array = clients_represented_array
        self.status_hint = status_hint
        self.advanced_degree_array = advanced_degree_array
        self.bar_status_array = bar_status_array
        self.related_cases_array = related_cases_array
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, administrative_actions_array, admission_type, appellate_court_district, appellate_division_department, attorney_group, authorized, bar_service_class, bio, board_certifications_array, board_district, circuit, comments, committees_array, court_history_array, court_of_admissions, court_service_email, disciplinary_history_array, discipline_summaries_array, dismissals_array, district, employment_history_array, expiration_date, fees_options_array, firm_size, firm_website, first_admitted_date, first_admitted_year, home_county, in_good_standing, insurance, involvements_array, judicial_district, juris_type, languages_array, last_renewal_date, law_school_array, legal_speciality_array, license_type, name, next_registration, next_renewal_date, open_action_status_array, other_jurisdiction_array, other_name_array, parish, pending_proceeding_array, position, practice_area_array, practice_location_array, private_law_practice, profile_last_certified, public_hearing_array, reason_for_inactivation, sections_array, services_array, source_info, statewide_grievance_committee_history_array, status, status_date, status_history_array, ten_year_discipline_array, undergraduate_school, bar_law_firm, years_of_practice, clients_represented_array, status_hint, advanced_degree_array, bar_status_array, related_cases_array, *args, **kwargs):  # noqa: E501
        """BarSourceData - a model defined in OpenAPI

        Args:
            administrative_actions_array ([BarSourceDataAdministrativeActionsArrayInner]):
            admission_type (str, none_type):
            appellate_court_district (str, none_type):
            appellate_division_department (str, none_type):
            attorney_group (str, none_type):
            authorized (str, none_type):
            bar_service_class (str, none_type):
            bio (str, none_type):
            board_certifications_array ([BarSourceDataBoardCertificationsArrayInner]):
            board_district (str, none_type):
            circuit (str, none_type):
            comments (str, none_type):
            committees_array ([BarSourceDataCommitteesArrayInner]):
            court_history_array ([BarSourceDataCourtHistoryArrayInner]):
            court_of_admissions (BarSourceDataCourtOfAdmissions):
            court_service_email (str, none_type):
            disciplinary_history_array ([BarSourceDataDisciplinaryHistoryArrayInner]):
            discipline_summaries_array ([BarSourceDataDisciplineSummariesArrayInner]):
            dismissals_array ([str]):
            district (str, none_type):
            employment_history_array ([BarSourceDataEmploymentHistoryArrayInner]):
            expiration_date (datetime, none_type):
            fees_options_array ([BarSourceDataFeesOptionsArrayInner]):
            firm_size (str, none_type):
            firm_website (str, none_type):
            first_admitted_date (datetime, none_type): The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.
            first_admitted_year (int, none_type):
            home_county (str, none_type):
            in_good_standing (str, none_type):
            insurance (str, none_type):
            involvements_array ([BarSourceDataInvolvementsArrayInner]):
            judicial_district (str, none_type):
            juris_type (str, none_type):
            languages_array ([str]):
            last_renewal_date (datetime, none_type):
            law_school_array ([BarSourceDataLawSchoolArrayInner]):
            legal_speciality_array ([str]):
            license_type (str, none_type):
            name (BarSourceDataName):
            next_registration (datetime, none_type):
            next_renewal_date (datetime, none_type):
            open_action_status_array ([BarSourceDataOpenActionStatusArrayInner]):
            other_jurisdiction_array ([BarSourceDataOtherJurisdictionArrayInner]):
            other_name_array ([str]):
            parish (str, none_type):
            pending_proceeding_array ([str]):
            position (str, none_type):
            practice_area_array ([str]):
            practice_location_array ([str]):
            private_law_practice (str, none_type):
            profile_last_certified (datetime, none_type):
            public_hearing_array ([BarSourceDataPublicHearingArrayInner]):
            reason_for_inactivation (BarSourceDataReasonForInactivation):
            sections_array ([str]):
            services_array ([str]):
            source_info (BarSourceDataSourceInfo):
            statewide_grievance_committee_history_array ([BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner]):
            status (str, none_type):
            status_date (datetime, none_type):
            status_history_array ([BarSourceDataStatusHistoryArrayInner]):
            ten_year_discipline_array ([BarSourceDataTenYearDisciplineArrayInner]):
            undergraduate_school (str, none_type):
            bar_law_firm (str, none_type):
            years_of_practice (str, none_type):
            clients_represented_array ([str]):
            status_hint (str, none_type):
            advanced_degree_array ([BarSourceDataAdvancedDegreeArrayInner]):
            bar_status_array ([BarSourceDataBarStatusArrayInner]):
            related_cases_array ([BarSourceDataRelatedCasesArrayInner]):

        Keyword Args:
            object (str): defaults to "BarSourceData"  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        object = kwargs.get('object', "BarSourceData")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.object = object
        self.administrative_actions_array = administrative_actions_array
        self.admission_type = admission_type
        self.appellate_court_district = appellate_court_district
        self.appellate_division_department = appellate_division_department
        self.attorney_group = attorney_group
        self.authorized = authorized
        self.bar_service_class = bar_service_class
        self.bio = bio
        self.board_certifications_array = board_certifications_array
        self.board_district = board_district
        self.circuit = circuit
        self.comments = comments
        self.committees_array = committees_array
        self.court_history_array = court_history_array
        self.court_of_admissions = court_of_admissions
        self.court_service_email = court_service_email
        self.disciplinary_history_array = disciplinary_history_array
        self.discipline_summaries_array = discipline_summaries_array
        self.dismissals_array = dismissals_array
        self.district = district
        self.employment_history_array = employment_history_array
        self.expiration_date = expiration_date
        self.fees_options_array = fees_options_array
        self.firm_size = firm_size
        self.firm_website = firm_website
        self.first_admitted_date = first_admitted_date
        self.first_admitted_year = first_admitted_year
        self.home_county = home_county
        self.in_good_standing = in_good_standing
        self.insurance = insurance
        self.involvements_array = involvements_array
        self.judicial_district = judicial_district
        self.juris_type = juris_type
        self.languages_array = languages_array
        self.last_renewal_date = last_renewal_date
        self.law_school_array = law_school_array
        self.legal_speciality_array = legal_speciality_array
        self.license_type = license_type
        self.name = name
        self.next_registration = next_registration
        self.next_renewal_date = next_renewal_date
        self.open_action_status_array = open_action_status_array
        self.other_jurisdiction_array = other_jurisdiction_array
        self.other_name_array = other_name_array
        self.parish = parish
        self.pending_proceeding_array = pending_proceeding_array
        self.position = position
        self.practice_area_array = practice_area_array
        self.practice_location_array = practice_location_array
        self.private_law_practice = private_law_practice
        self.profile_last_certified = profile_last_certified
        self.public_hearing_array = public_hearing_array
        self.reason_for_inactivation = reason_for_inactivation
        self.sections_array = sections_array
        self.services_array = services_array
        self.source_info = source_info
        self.statewide_grievance_committee_history_array = statewide_grievance_committee_history_array
        self.status = status
        self.status_date = status_date
        self.status_history_array = status_history_array
        self.ten_year_discipline_array = ten_year_discipline_array
        self.undergraduate_school = undergraduate_school
        self.bar_law_firm = bar_law_firm
        self.years_of_practice = years_of_practice
        self.clients_represented_array = clients_represented_array
        self.status_hint = status_hint
        self.advanced_degree_array = advanced_degree_array
        self.bar_status_array = bar_status_array
        self.related_cases_array = related_cases_array
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
