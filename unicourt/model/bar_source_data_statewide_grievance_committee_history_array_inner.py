# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner(BaseModel):
    """
    BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner
    """ # noqa: E501
    final_decision: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="finalDecision")
    final_decision_date: Optional[datetime] = Field(default=None, alias="finalDecisionDate")
    grievance_complaint_number: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="grievanceComplaintNumber")
    public_comments: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, alias="publicComments")
    __properties: ClassVar[List[str]] = ["finalDecision", "finalDecisionDate", "grievanceComplaintNumber", "publicComments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if final_decision (nullable) is None
        # and model_fields_set contains the field
        if self.final_decision is None and "final_decision" in self.model_fields_set:
            _dict['finalDecision'] = None

        # set to None if final_decision_date (nullable) is None
        # and model_fields_set contains the field
        if self.final_decision_date is None and "final_decision_date" in self.model_fields_set:
            _dict['finalDecisionDate'] = None

        # set to None if grievance_complaint_number (nullable) is None
        # and model_fields_set contains the field
        if self.grievance_complaint_number is None and "grievance_complaint_number" in self.model_fields_set:
            _dict['grievanceComplaintNumber'] = None

        # set to None if public_comments (nullable) is None
        # and model_fields_set contains the field
        if self.public_comments is None and "public_comments" in self.model_fields_set:
            _dict['publicComments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BarSourceDataStatewideGrievanceCommitteeHistoryArrayInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "finalDecision": obj.get("finalDecision"),
            "finalDecisionDate": obj.get("finalDecisionDate"),
            "grievanceComplaintNumber": obj.get("grievanceComplaintNumber"),
            "publicComments": obj.get("publicComments")
        })
        return _obj


