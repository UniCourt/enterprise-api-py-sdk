# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from unicourt.model.case_analytics_api import CaseAnalyticsAPI
from unicourt.model.judge_analytics_api import JudgeAnalyticsAPI
from unicourt.model.norm_judge_public_data import NormJudgePublicData
from typing import Optional, Set
from typing_extensions import Self

class NormJudge(BaseModel):
    """
    Norm Judge
    """ # noqa: E501
    object: Optional[Annotated[str, Field(strict=True, max_length=9)]] = 'NormJudge'
    norm_judge_id: Optional[Annotated[str, Field(min_length=18, strict=True, max_length=18)]] = Field(default=None, alias="normJudgeId")
    name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = None
    first_name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, alias="firstName")
    middle_name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, alias="middleName")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, alias="lastName")
    case_search_api: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="caseSearchAPI")
    case_analytics_api: Optional[CaseAnalyticsAPI] = Field(default=None, alias="caseAnalyticsAPI")
    has_associated_public_data: Optional[StrictBool] = Field(default=None, alias="hasAssociatedPublicData")
    judicial_data_array: Optional[List[NormJudgePublicData]] = Field(default=None, alias="judicialDataArray")
    judge_analytics_api: Optional[JudgeAnalyticsAPI] = Field(default=None, alias="judgeAnalyticsAPI")
    __properties: ClassVar[List[str]] = ["object", "normJudgeId", "name", "firstName", "middleName", "lastName", "caseSearchAPI", "caseAnalyticsAPI", "hasAssociatedPublicData", "judicialDataArray", "judgeAnalyticsAPI"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NormJudge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of case_analytics_api
        if self.case_analytics_api:
            _dict['caseAnalyticsAPI'] = self.case_analytics_api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in judicial_data_array (list)
        _items = []
        if self.judicial_data_array:
            for _item in self.judicial_data_array:
                if _item:
                    _items.append(_item.to_dict())
            _dict['judicialDataArray'] = _items
        # override the default output from pydantic by calling `to_dict()` of judge_analytics_api
        if self.judge_analytics_api:
            _dict['judgeAnalyticsAPI'] = self.judge_analytics_api.to_dict()
        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middleName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NormJudge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object") if obj.get("object") is not None else 'NormJudge',
            "normJudgeId": obj.get("normJudgeId"),
            "name": obj.get("name"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "caseSearchAPI": obj.get("caseSearchAPI"),
            "caseAnalyticsAPI": CaseAnalyticsAPI.from_dict(obj["caseAnalyticsAPI"]) if obj.get("caseAnalyticsAPI") is not None else None,
            "hasAssociatedPublicData": obj.get("hasAssociatedPublicData"),
            "judicialDataArray": [NormJudgePublicData.from_dict(_item) for _item in obj["judicialDataArray"]] if obj.get("judicialDataArray") is not None else None,
            "judgeAnalyticsAPI": JudgeAnalyticsAPI.from_dict(obj["judgeAnalyticsAPI"]) if obj.get("judgeAnalyticsAPI") is not None else None
        })
        return _obj


