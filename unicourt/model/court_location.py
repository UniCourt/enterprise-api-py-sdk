# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CourtLocation(BaseModel):
    """
    CourtLocation
    """ # noqa: E501
    object: Optional[Annotated[str, Field(min_length=13, strict=True, max_length=13)]] = 'CourtLocation'
    court_location_id: Optional[Annotated[str, Field(min_length=18, strict=True, max_length=18)]] = Field(default=None, alias="courtLocationId")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = None
    street_address1: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=250)]] = Field(default=None, description="1st part of the street address.", alias="streetAddress1")
    street_address2: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(default=None, description="2nd part of the street address.", alias="streetAddress2")
    city: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="City")
    state_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default='UNKNOWN', description="State Name if present else default value.", alias="stateName")
    created_date: Optional[datetime] = Field(default=None, description="The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.", alias="createdDate")
    courts_for_court_location_api: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, alias="courtsForCourtLocationAPI")
    court_service_status_api: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2048)]] = Field(default=None, alias="courtServiceStatusAPI")
    __properties: ClassVar[List[str]] = ["object", "courtLocationId", "name", "streetAddress1", "streetAddress2", "city", "stateName", "createdDate", "courtsForCourtLocationAPI", "courtServiceStatusAPI"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CourtLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if street_address1 (nullable) is None
        # and model_fields_set contains the field
        if self.street_address1 is None and "street_address1" in self.model_fields_set:
            _dict['streetAddress1'] = None

        # set to None if street_address2 (nullable) is None
        # and model_fields_set contains the field
        if self.street_address2 is None and "street_address2" in self.model_fields_set:
            _dict['streetAddress2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if court_service_status_api (nullable) is None
        # and model_fields_set contains the field
        if self.court_service_status_api is None and "court_service_status_api" in self.model_fields_set:
            _dict['courtServiceStatusAPI'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CourtLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object") if obj.get("object") is not None else 'CourtLocation',
            "courtLocationId": obj.get("courtLocationId"),
            "name": obj.get("name"),
            "streetAddress1": obj.get("streetAddress1"),
            "streetAddress2": obj.get("streetAddress2"),
            "city": obj.get("city"),
            "stateName": obj.get("stateName") if obj.get("stateName") is not None else 'UNKNOWN',
            "createdDate": obj.get("createdDate"),
            "courtsForCourtLocationAPI": obj.get("courtsForCourtLocationAPI"),
            "courtServiceStatusAPI": obj.get("courtServiceStatusAPI")
        })
        return _obj


