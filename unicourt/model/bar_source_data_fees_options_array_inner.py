# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BarSourceDataFeesOptionsArrayInner(BaseModel):
    """
    BarSourceDataFeesOptionsArrayInner
    """ # noqa: E501
    contingency_fees: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="contingencyFees")
    flat_fees: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="flatFees")
    hourly_rate: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="hourlyRate")
    payment_plans: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="paymentPlans")
    sliding_scale_fees: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="slidingScaleFees")
    __properties: ClassVar[List[str]] = ["contingencyFees", "flatFees", "hourlyRate", "paymentPlans", "slidingScaleFees"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BarSourceDataFeesOptionsArrayInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contingency_fees (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_fees is None and "contingency_fees" in self.model_fields_set:
            _dict['contingencyFees'] = None

        # set to None if flat_fees (nullable) is None
        # and model_fields_set contains the field
        if self.flat_fees is None and "flat_fees" in self.model_fields_set:
            _dict['flatFees'] = None

        # set to None if hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_rate is None and "hourly_rate" in self.model_fields_set:
            _dict['hourlyRate'] = None

        # set to None if payment_plans (nullable) is None
        # and model_fields_set contains the field
        if self.payment_plans is None and "payment_plans" in self.model_fields_set:
            _dict['paymentPlans'] = None

        # set to None if sliding_scale_fees (nullable) is None
        # and model_fields_set contains the field
        if self.sliding_scale_fees is None and "sliding_scale_fees" in self.model_fields_set:
            _dict['slidingScaleFees'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BarSourceDataFeesOptionsArrayInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contingencyFees": obj.get("contingencyFees"),
            "flatFees": obj.get("flatFees"),
            "hourlyRate": obj.get("hourlyRate"),
            "paymentPlans": obj.get("paymentPlans"),
            "slidingScaleFees": obj.get("slidingScaleFees")
        })
        return _obj


